#include <stdio.h>
#include <stdlib.h>

int maxtree = 100;

struct MinHeapNode {
 
    int data;
    int freq;
    struct MinHeapNode *left, *right;
};
 
struct MinHeap {

    int size;
    int capacity;
    
    struct MinHeapNode** array;
};
 
//making nodes
struct MinHeapNode* newNode(int data, int freq)
{
    struct MinHeapNode* temp = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));
 
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
 
    return temp;
}
 
//making array
struct MinHeap* createMinHeap(int capacity)
{
 
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
 
    minHeap->size = 0;
 
    minHeap->capacity = capacity;
 
    minHeap->array = (struct MinHeapNode**)malloc(minHeap->capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}
 
void swapMinHeapNode(struct MinHeapNode** a,struct MinHeapNode** b) 
{
 
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}
 
// The standard minHeapify function.
void minHeapify(struct MinHeap* minHeap, int idx)
 
{
 
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;
 
    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)
        smallest = left;
 
    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)
        smallest = right;
 
    if (smallest != idx) {
        swapMinHeapNode(&minHeap->array[smallest] , &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}
 
//returning max freq as root
struct MinHeapNode* extractMin(struct MinHeap* minHeap)
 
{
 
    struct MinHeapNode* temp = minHeap->array[0];
	minHeap->array[0] = minHeap->array[minHeap->size - 1];
 
    --minHeap->size;
    minHeapify(minHeap, 0);
 
    return temp;
}
 
//inserting new summation node
void insertMinHeap(struct MinHeap* minHeap , struct MinHeapNode* minHeapNode)
 
{
 
    ++minHeap->size;
    int i = minHeap->size - 1;
 	
 	//binary search
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {
 
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
 
    minHeap->array[i] = minHeapNode;
}
 
//min heap
void buildMinHeap(struct MinHeap* minHeap)
 
{
 
    int n = minHeap->size - 1;
    int i;
 
    for (i = (n - 1) / 2; i >= 0; --i)
        minHeapify(minHeap, i);
}
 
 
struct MinHeap* createAndBuildMinHeap(int data[], int freq[], int size)
 
{
 
    struct MinHeap* minHeap = createMinHeap(size);  //making array
 	int i;
 	
 	//making nodes from elements of array
    for (i = 0; i < size; ++i)
        minHeap->array[i] = newNode(data[i], freq[i]);
 
    minHeap->size = size;
    buildMinHeap(minHeap);
 
    return minHeap;
}
 
//Huffman tree
struct MinHeapNode* buildHuffmanTree(int data[], int freq[], int size)
 
{
    struct MinHeapNode *left, *right, *top;
    struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size);
 
    while (minHeap->size != 1) {
 
        left = extractMin(minHeap);
        right = extractMin(minHeap);
 
        top = newNode(0 , left->freq + right->freq);
 
        top->left = left;
        top->right = right;
 
        insertMinHeap(minHeap, top);
    }
 
    
    return (minHeap->array[0]);
}
 
//printing the codes
void printCodes(struct MinHeapNode* root, int arr[], int top)
 
{
 
    if (root->left != NULL) {
 
        arr[top] = 0;
        printCodes(root->left, arr, top + 1);
    }
 	
    if (root->right != NULL) {
 
        arr[top] = 1;
        printCodes(root->right, arr, top + 1);
    }
 
    if (root->left == NULL && root->right == NULL) {
 
        printf("  %d   :   ", root->data);
        
        int i;
    	for (i = 0; i < top; ++i)
        printf("%d", arr[i]);
 
    	printf("\n");
    }
}
 

void HuffmanCodes(int data[], int freq[], int size)
 
{
	//printf("%d", );
    
    struct MinHeapNode* root = buildHuffmanTree(data, freq, size);
 
    int arr[maxtree];
 
    printCodes(root, arr, 0);
}


//............................................................................................................................................
int main()
{
	char filename[] = "lol1.bmp";
	int i,j,data,offset,hbytes,width,height;
	long bmpsize=0,bmpdataoff=0,bpp=0;
	int **image;
	int temp=0;
	FILE *image_file;
	image_file = fopen(filename,"rb");
	if(image_file==NULL)
	{
		printf("Error Opening File!!");
		exit(1);
	}
	else
	{
		
		offset = 0;
		fseek(image_file,offset,SEEK_SET);
		
		for(i=0;i<2;i++)
		{
			fread(&data,1,1,image_file);
			printf("%c",data);
		}
		
		fread(&bmpsize,4,1,image_file);
		printf("Size of the BMP File:: %ld bytes\n\n",bmpsize);
		
		offset = 10;
		fseek(image_file,offset,SEEK_SET);
		fread(&bmpdataoff,4,1,image_file);
		printf("Bitmap data offset:: %ld\n\n",bmpdataoff);
		
		fread(&hbytes,4,1,image_file);
		//printf("Number of bytes in header:: %d\n\n",hbytes);
		fread(&width,4,1,image_file);
		fread(&height,4,1,image_file);
		printf("Width of Image: %d\n",width);
		printf("Height of image: %d\n\n",height);
		fseek(image_file,2,SEEK_CUR);
		fread(&bpp,2,1,image_file);
		printf("Number of bits per pixel: %ld\n\n",bpp);
	
		fseek(image_file,bmpdataoff,SEEK_SET);
		
		int **image = (int **)malloc(height*sizeof(int *));
		for(i=0;i<height;i++)
		{
			image[i] = (int *)malloc(width*sizeof(int));
		}
		int numbytes = (bmpsize - bmpdataoff)/3;
		//printf("Number of bytes: %d \n\n",numbytes);
		int r,c;
		
		for(r=0;r<height;r++)
		{
			for(c=0;c<width;c++)
			{
				fread(&temp,3,1,image_file);
				temp = temp&0x0000FF;
				image[r][c] = temp;
				
			}
		}
		/*
		for(r=0;r<10;r++)
		{
			for(c=0;c<10;c++)
			{
				printf("%d ",image[r][c]);
				
			}
		}
		*/
		
		//int counter = 0;
		
		int hist[256];
 
		for (i = 0; i < 256; i++)
    		hist[i] = 0;
 
		for (i = 0; i < height; i++)
    		for (j = 0; j < width; j++)
        		hist[image[i][j]] += 1;	
				
		/*
		for(c=0;c<256;c++)
			{
				printf("%d ",hist[c]);
				//counter++;
			}
		*/	
			
		int x[256];
    	int y[256];
    
		int m =0; 
   		int nodes = 0;
    	for (i = 0; i < 256; i++)
    	{
        if (hist[i] != 0)
        {
            nodes += 1;
            x[m] = hist[i];
            y[m] = i;
			m++;
			//counter++;
        }
    	}
        
        int *arr = (int *)malloc(nodes*sizeof(int *));
        int *freq = (int *)malloc(nodes*sizeof(int *));
		//printf("Reading the BMP File into Image Array Completed...\n\n : %d", counter);
		
		for (i = 0; i < nodes; i++)
		{
			arr[i] = y[i];
			freq[i] = x[i];
			//printf("%d ", arr[i]);
		}
		
		
		/*
		for (i = 0; i < nodes; i++)
		{
			printf("%d : %d \n" , arr[i],freq[i]);
		}
		*/
		
		
		//int size = sizeof(arr) / sizeof(arr[0]);
		//printf("..........%d..........", nodes);
 
 
    	HuffmanCodes(arr, freq, nodes);
 
    	return 0;
		
	}
	fclose(image_file);
	return EXIT_SUCCESS;
}
